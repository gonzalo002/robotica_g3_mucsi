// Generated by gencpp from file proyecto_final/HandData.msg
// DO NOT EDIT!


#ifndef PROYECTO_FINAL_MESSAGE_HANDDATA_H
#define PROYECTO_FINAL_MESSAGE_HANDDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace proyecto_final
{
template <class ContainerAllocator>
struct HandData_
{
  typedef HandData_<ContainerAllocator> Type;

  HandData_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , is_open(false)
    , is_peace(false)
    , hand_detected(false)
    , is_dino(false)
    , is_dislike(false)  {
    }
  HandData_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , is_open(false)
    , is_peace(false)
    , hand_detected(false)
    , is_dino(false)
    , is_dislike(false)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef uint8_t _is_open_type;
  _is_open_type is_open;

   typedef uint8_t _is_peace_type;
  _is_peace_type is_peace;

   typedef uint8_t _hand_detected_type;
  _hand_detected_type hand_detected;

   typedef uint8_t _is_dino_type;
  _is_dino_type is_dino;

   typedef uint8_t _is_dislike_type;
  _is_dislike_type is_dislike;





  typedef boost::shared_ptr< ::proyecto_final::HandData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::proyecto_final::HandData_<ContainerAllocator> const> ConstPtr;

}; // struct HandData_

typedef ::proyecto_final::HandData_<std::allocator<void> > HandData;

typedef boost::shared_ptr< ::proyecto_final::HandData > HandDataPtr;
typedef boost::shared_ptr< ::proyecto_final::HandData const> HandDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::proyecto_final::HandData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::proyecto_final::HandData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::proyecto_final::HandData_<ContainerAllocator1> & lhs, const ::proyecto_final::HandData_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.is_open == rhs.is_open &&
    lhs.is_peace == rhs.is_peace &&
    lhs.hand_detected == rhs.hand_detected &&
    lhs.is_dino == rhs.is_dino &&
    lhs.is_dislike == rhs.is_dislike;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::proyecto_final::HandData_<ContainerAllocator1> & lhs, const ::proyecto_final::HandData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace proyecto_final

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::proyecto_final::HandData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::proyecto_final::HandData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proyecto_final::HandData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proyecto_final::HandData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proyecto_final::HandData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proyecto_final::HandData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::proyecto_final::HandData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b0493b2ed6710620a749baf2ddc5457";
  }

  static const char* value(const ::proyecto_final::HandData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b0493b2ed671062ULL;
  static const uint64_t static_value2 = 0x0a749baf2ddc5457ULL;
};

template<class ContainerAllocator>
struct DataType< ::proyecto_final::HandData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "proyecto_final/HandData";
  }

  static const char* value(const ::proyecto_final::HandData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::proyecto_final::HandData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"bool is_open\n"
"bool is_peace\n"
"bool hand_detected\n"
"bool is_dino\n"
"bool is_dislike\n"
;
  }

  static const char* value(const ::proyecto_final::HandData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::proyecto_final::HandData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.is_open);
      stream.next(m.is_peace);
      stream.next(m.hand_detected);
      stream.next(m.is_dino);
      stream.next(m.is_dislike);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::proyecto_final::HandData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::proyecto_final::HandData_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "is_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_open);
    s << indent << "is_peace: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_peace);
    s << indent << "hand_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_detected);
    s << indent << "is_dino: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dino);
    s << indent << "is_dislike: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dislike);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROYECTO_FINAL_MESSAGE_HANDDATA_H
