// Generated by gencpp from file proyecto_final/HandResult.msg
// DO NOT EDIT!


#ifndef PROYECTO_FINAL_MESSAGE_HANDRESULT_H
#define PROYECTO_FINAL_MESSAGE_HANDRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <proyecto_final/HandData.h>

namespace proyecto_final
{
template <class ContainerAllocator>
struct HandResult_
{
  typedef HandResult_<ContainerAllocator> Type;

  HandResult_()
    : hand_data()  {
    }
  HandResult_(const ContainerAllocator& _alloc)
    : hand_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::proyecto_final::HandData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::proyecto_final::HandData_<ContainerAllocator> >> _hand_data_type;
  _hand_data_type hand_data;





  typedef boost::shared_ptr< ::proyecto_final::HandResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::proyecto_final::HandResult_<ContainerAllocator> const> ConstPtr;

}; // struct HandResult_

typedef ::proyecto_final::HandResult_<std::allocator<void> > HandResult;

typedef boost::shared_ptr< ::proyecto_final::HandResult > HandResultPtr;
typedef boost::shared_ptr< ::proyecto_final::HandResult const> HandResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::proyecto_final::HandResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::proyecto_final::HandResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::proyecto_final::HandResult_<ContainerAllocator1> & lhs, const ::proyecto_final::HandResult_<ContainerAllocator2> & rhs)
{
  return lhs.hand_data == rhs.hand_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::proyecto_final::HandResult_<ContainerAllocator1> & lhs, const ::proyecto_final::HandResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace proyecto_final

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::proyecto_final::HandResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::proyecto_final::HandResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proyecto_final::HandResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proyecto_final::HandResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proyecto_final::HandResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proyecto_final::HandResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::proyecto_final::HandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e2c27ecbe4c685c21e13c0026bb9b71";
  }

  static const char* value(const ::proyecto_final::HandResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e2c27ecbe4c685cULL;
  static const uint64_t static_value2 = 0x21e13c0026bb9b71ULL;
};

template<class ContainerAllocator>
struct DataType< ::proyecto_final::HandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "proyecto_final/HandResult";
  }

  static const char* value(const ::proyecto_final::HandResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::proyecto_final::HandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"HandData[] hand_data\n"
"\n"
"================================================================================\n"
"MSG: proyecto_final/HandData\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"bool hand_detected\n"
"bool is_peace\n"
"bool is_dino\n"
"bool is_dislike\n"
"bool is_open\n"
;
  }

  static const char* value(const ::proyecto_final::HandResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::proyecto_final::HandResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hand_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::proyecto_final::HandResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::proyecto_final::HandResult_<ContainerAllocator>& v)
  {
    s << indent << "hand_data[]" << std::endl;
    for (size_t i = 0; i < v.hand_data.size(); ++i)
    {
      s << indent << "  hand_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::proyecto_final::HandData_<ContainerAllocator> >::stream(s, indent + "    ", v.hand_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROYECTO_FINAL_MESSAGE_HANDRESULT_H
