// Generated by gencpp from file proyecto_final/IdCubos.msg
// DO NOT EDIT!


#ifndef PROYECTO_FINAL_MESSAGE_IDCUBOS_H
#define PROYECTO_FINAL_MESSAGE_IDCUBOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace proyecto_final
{
template <class ContainerAllocator>
struct IdCubos_
{
  typedef IdCubos_<ContainerAllocator> Type;

  IdCubos_()
    : color(0)
    , pose()  {
    }
  IdCubos_(const ContainerAllocator& _alloc)
    : color(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _color_type;
  _color_type color;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::proyecto_final::IdCubos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::proyecto_final::IdCubos_<ContainerAllocator> const> ConstPtr;

}; // struct IdCubos_

typedef ::proyecto_final::IdCubos_<std::allocator<void> > IdCubos;

typedef boost::shared_ptr< ::proyecto_final::IdCubos > IdCubosPtr;
typedef boost::shared_ptr< ::proyecto_final::IdCubos const> IdCubosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::proyecto_final::IdCubos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::proyecto_final::IdCubos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::proyecto_final::IdCubos_<ContainerAllocator1> & lhs, const ::proyecto_final::IdCubos_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::proyecto_final::IdCubos_<ContainerAllocator1> & lhs, const ::proyecto_final::IdCubos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace proyecto_final

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::proyecto_final::IdCubos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::proyecto_final::IdCubos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proyecto_final::IdCubos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proyecto_final::IdCubos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proyecto_final::IdCubos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proyecto_final::IdCubos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::proyecto_final::IdCubos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d40436a98b00a5347eed8cfb3ef00bf";
  }

  static const char* value(const ::proyecto_final::IdCubos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d40436a98b00a53ULL;
  static const uint64_t static_value2 = 0x47eed8cfb3ef00bfULL;
};

template<class ContainerAllocator>
struct DataType< ::proyecto_final::IdCubos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "proyecto_final/IdCubos";
  }

  static const char* value(const ::proyecto_final::IdCubos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::proyecto_final::IdCubos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 color\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::proyecto_final::IdCubos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::proyecto_final::IdCubos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IdCubos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::proyecto_final::IdCubos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::proyecto_final::IdCubos_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<int8_t>::stream(s, indent + "  ", v.color);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROYECTO_FINAL_MESSAGE_IDCUBOS_H
